# -*- coding: utf-8; mode: apache -*-
# ----------------------------------------------------------------------------
# Purpose:     Serve common python-Apps on this server
# ----------------------------------------------------------------------------

<IfModule mod_wsgi.c>

    # Read:
    #
    #    https://groups.google.com/d/msg/modwsgi/tq2TI76-q3g/wGkN7Ipb3sYJ
    #
    #    The only thing changed here, is the fact, that the 'main' Apache runs
    #    Py3 Apps and the 'mod_wsgi-express' runs the Py2 Apps.::
    #
    # In other words, the main Apache/mod_wsgi instance could be setup for
    # Python 3 and handle the web application requiring Python 2. Any requests
    # then destined for the Python 2 web application would instead be forwarded
    # onto a second backend instance on a separate port running that
    # application.
    # ...
    # The issue then is actually how can we easily run both a Python 2 and Python
    # 3 web application at the same time with Apache/mod_wsgi even if in separate
    # processes.
    # ...
    # Yes, you could manually install a separate Apache installation with
    # mod_wsgi, but that is a pain. The better way at this point is actually to
    # use mod_wsgi-express.
    # ...
    # In short, mod_wsgi-express allows you to easily run multiple instances of
    # Apache/mod_wsgi using different configurations and different versions of
    # Python.
    # ...
    # What I want to talk about here is another trick which doesnâ€™t require you
    # to write any system startup scripts or use supervisord.
    # ...
    # You would then use the daemon mode capabilities of mod_wsgi to define a
    # new daemon process group with a single process. This daemon process will
    # be defined so it is run, but you will never setup mod_wsgi to run a WSGI
    # application directly in it. As far as mod_wsgi is concerned it is an
    # unused process. What instead we are going to do is use the fact that
    # Apache/mod_wsgi will manage that process and keep it running.
    # ...
    # What we can now do is tell mod_wsgi to import a specific Python script
    # file into that special daemon process group process at the time it is
    # started. In this Python script we can add code which will exec() a
    # separate application. That separate application will then be managed by
    # Apache and kept running.  This separate process could be anything. ... In
    # this case what we can do though is exec() an instance of mod_wsgi-express
    # which is installed for your Python 2 application.
    # ...
    # With the main Apache then managing that separate mod_wsgi-express
    # instance, you would then also setup the main Apache to proxy requests for
    # just the sub URL for that application, to whatever port the
    # mod_wsgi-express instance is listening on.

    # https://pypi.python.org/pypi/mod_wsgi
    # http://modwsgi.readthedocs.io/en/develop/configuration-directives/WSGIDaemonProcess.html

    WSGIDaemonProcess py2proxy \
        user=www-data group=nogroup \
        processes=1 threads=1

</IfModule>
